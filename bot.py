import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.filters.command import Command, CommandObject
from config_reader import config
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
#–û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# –î–ª—è –∑–∞–ø–∏—Å–µ–π —Å —Ç–∏–ø–æ–º Secret* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ get_secret_value(),
# —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–º–µ—Å—Ç–æ '*******'
bot = Bot(token=config.bot_token.get_secret_value())
#–î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!")
#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.answer("Test 1")

@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    await message.answer("Hello, <i>world</i>!", parse_mode="HTML") #–∫—É—Ä—Å–∏–≤ –¥–ª—è "world" –¥–ª—è HTML
    await message.answer("Hello, *world*\!", parse_mode="MarkdownV2") #–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è "world" –¥–ª—è markdownV2

@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å ""–æ—Ç–≤–µ—Ç–æ–º"')

@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")
@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")

@dp.message(Command("show_list"))
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")

@dp.message(Command("name"))
async def cmd_name(message: types.Message, command: CommandObject): #—Ç–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Command, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ö—ç–Ω–¥–ª–µ—Ä –∞—Ä–≥—É–µ–º–Ω—Ç command c –∏–ø–æ–º
    if command.args: #—Å —Ç–∏–ø–æ–º CommandObjetct
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(html.quote(command.args))}!", parse_mode="HTML") #–º–µ—Ç–æ–¥—ã bold –∏ quote –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name.")
#–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot, mylist = [1, 2, 3])

if __name__ == '__main__':
    asyncio.run(main())


