import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.filters.command import Command, CommandObject
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile
from config_reader import config
from datetime import datetime
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
#–û–±—ä–µ–∫—Ç –±–æ—Ç–∞
# –î–ª—è –∑–∞–ø–∏—Å–µ–π —Å —Ç–∏–ø–æ–º Secret* –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ get_secret_value(),
# —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–º–µ—Å—Ç–æ '*******'
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="HTML")
#–î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!")
#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message(Command("test1"))
async def cmd_test1(message: types.Message):
    await message.answer("Test 1")

@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    await message.answer("Hello, <i>world</i>!", parse_mode="HTML") #–∫—É—Ä—Å–∏–≤ –¥–ª—è "world" –¥–ª—è HTML
    await message.answer("Hello, *world*\!", parse_mode="MarkdownV2") #–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è "world" –¥–ª—è markdownV2

@dp.message(Command("answer"))
async def cmd_answer(message: types.Message):
    await message.answer("–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply('–≠—Ç–æ –æ—Ç–≤–µ—Ç —Å ""–æ—Ç–≤–µ—Ç–æ–º"')

@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")
@dp.message(Command("add_to_list"))
async def cmd_add_to_list(message: types.Message, mylist: list[int]):
    mylist.append(7)
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ 7")

@dp.message(Command("show_list"))
async def cmd_show_list(message: types.Message, mylist: list[int]):
    await message.answer(f"–í–∞—à —Å–ø–∏—Å–æ–∫: {mylist}")

@dp.message(Command("name"))
async def cmd_name(message: types.Message, command: CommandObject): #—Ç–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä Command, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ö—ç–Ω–¥–ª–µ—Ä –∞—Ä–≥—É–µ–º–Ω—Ç command c –∏–ø–æ–º
    if command.args: #—Å —Ç–∏–ø–æ–º CommandObjetct
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {html.bold(html.quote(command.args))}!", parse_mode="HTML") #–º–µ—Ç–æ–¥—ã bold –∏ quote –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    else:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /name.")

@dp.message(Command("image"))
async def upload_photo(message: types.Message):
    file_ids = [] #–∑–¥–µ—Å—å file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    '''with open("buffer_emulation.jpg", "rb") as image_from_buffer:
        result = await message.answer_photo(
            BufferedInputFile(
                image_from_buffer.read(),
                filename="image from buffer.jpg"
            ),
            caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞"
        )
        file_ids.append(result.photo[-1].file_id)'''

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    image_from_pc = FSInputFile("image_from_pc.jpg")
    result = await message.answer_photo(
        image_from_pc,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ"
    )
    file_ids.append(result.photo[-1].file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    image_from_url = URLInputFile("https://picsum.photos/seed/groosha/400/300")
    result = await message.answer_photo(
        image_from_url,
        caption="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ"
    )
    file_ids.append(result.photo[-1].file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n" + "\n".join(file_ids))
# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–æ—Ç–æ–º
@dp.message(F.photo)
async def download_photo(message: types.Message, bot: Bot):
    await bot.download(message.photo[-1], destination=f"C:\\tmp\\{message.photo[-1].file_id}.jpg")
@dp.message(F.sticker)
async def download_sticker(message: types.Message, bot: Bot):
    await bot.download(message.sticker, destination=f"C:\\tmp\\{message.sticker.file_id}.webp")

#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""@dp.message(F.text)
async def echo_with_time(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ü–ö
    time_now = datetime.now().strftime('%H:%M')
    #–°–æ–∑–¥–∞–µ–º –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    added_text = html.underline(f"–°–æ–∑–¥–∞–Ω–æ –≤ {time_now}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    await message.answer(f"{message.html_text}\n {added_text}", parse_mode="HTML")
"""

@dp.message(F.text)
async def extract_data(message: types.Message):
    data = {
        "url": "<N/A>",
        "email": "<N/A>",
        "code": "<N/A>"
    }
    entities = message.entities or []
    for item in entities:
        if item.type in data.keys():
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
            # data[item.type] = message.text[item.offset : item.offset+item.length]
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ
            data[item.type] = item.extract_from(message.text)

    await message.reply(
        "–í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:\n"
        f"URL: {html.quote(data['url'])}\n"
        f"E-mail: {html.quote(data['email'])}\n"
        f"–ü–∞—Ä–æ–ª—å: {html.quote(data['code'])}"
    )
# –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–π –∂–µ –≥–∏—Ñ–∫–æ–π, —á—Ç–æ –∏ –ø—Ä–∏—Å–ª–∞–ª–∏
@dp.message(F.animation)
async def echo_gif(message: types.Message):
    await message.reply_animation(message.animation.file_id)



#–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot, mylist = [1, 2, 3])

if __name__ == '__main__':
    asyncio.run(main())


